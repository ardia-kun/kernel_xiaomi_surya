name: Kernel Build (A10 MIUI)

on:
  workflow_dispatch:

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  BUILD_USER: fannndi
  BUILD_HOST: github
  CLANG_TRIPLE: aarch64-linux-gnu-

jobs:
  build:
    name: Compile Kernel
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set Timezone & Build Vars
        run: |
          set -e
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
          TIME=$(date '+%Y%m%d-%H%M')
          BUILD_ID=$(date '+%Y%m%d%H%M%S')
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
          echo "TIME=$TIME" >> $GITHUB_ENV

      - name: Validate Defconfig File
        run: |
          [ ! -f arch/arm64/configs/surya_defconfig ] && {
            echo "::error ::Defconfig not found!"; exit 1;
          }

      - name: Create Swap (4GB)
        run: |
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            abootimg android-sdk-libsparse-utils bc binutils bison build-essential ccache clang cmake cpio \
            curl device-tree-compiler flex gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi gettext git jq kmod \
            libelf-dev libfdt-dev liblz4-tool libncurses5-dev libncursesw5-dev libssl-dev libudev-dev \
            libxml2-utils libzstd-dev llvm lsb-release lz4 lzop make nano ninja-build openssl patchutils \
            pigz protobuf-compiler python-is-python3 python3 python3-mako python3-pip python3-virtualenv \
            rsync unzip wget xz-utils zip zstd

      - name: Download Clang r437112b (Android 12)
        run: |
          set -e
          if [[ ! -f "clang/bin/clang" || ! -f "clang/bin/ld.lld" ]]; then
            echo "üîΩ Downloading Clang..."
            mkdir -p clang
            wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android12-release/clang-r437112b.tar.gz -O - | tar -xz -C clang
          fi
          echo "$GITHUB_WORKSPACE/clang/bin" >> $GITHUB_PATH
          echo "TOOLCHAIN_PATH=$GITHUB_WORKSPACE/clang" >> $GITHUB_ENV

      - name: Get Clang Version
        id: clang
        run: echo "version=$(clang/bin/clang --version | head -n1)" >> $GITHUB_OUTPUT

      - name: Clean Output Directory
        run: rm -rf out *.zip AnyKernel3 log.txt dtb.img dtbo.img Image.gz-dtb

      - name: Telegram - Build Started
        run: |
          MSG="üöÄ *Kernel Build Started!*\n"
          MSG+="üß± Defconfig: \`surya_defconfig\`\n"
          MSG+="üõ†Ô∏è Clang: \`${{ steps.clang.outputs.version }}\`"
          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            -d text="$MSG" \
            -d parse_mode=Markdown

      - name: Make Defconfig
        run: |
          set -e
          make O=out ARCH=arm64 surya_defconfig
          make O=out ARCH=arm64 olddefconfig

      - name: Get Kernel Version from .config
        run: |
          VERSION=$(grep -oP '(?<=CONFIG_LOCALVERSION=")([^"]+)' out/.config || git rev-parse --short HEAD)
          ZIPNAME="MIUI-A10-${VERSION}-${TIME}.zip"
          echo "ZIPNAME=$ZIPNAME" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Compile Kernel
        run: |
          set -e
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export KBUILD_COMPILER_STRING="${{ steps.clang.outputs.version }}"

          make -j$(nproc) O=out \
            ARCH=arm64 \
            CC=clang \
            LD=ld.lld \
            AS=llvm-as \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            CLANG_TRIPLE=${{ env.CLANG_TRIPLE }} \
            LLVM=1 LLVM_IAS=1 \
            KBUILD_VERBOSE=2 \
            KBUILD_BUILD_USER=${{ env.BUILD_USER }} \
            KBUILD_BUILD_HOST=${{ env.BUILD_HOST }} \
            Image.gz dtbs | tee log.txt

          [ ! -f out/arch/arm64/boot/Image.gz ] && {
            echo "::error ::Image.gz not found!"; exit 1;
          }

      - name: Save Final .config
        run: cp out/.config defconfig_snapshot.config

      - name: Create Kernel Images
        run: |
          set -e
          cat out/arch/arm64/boot/Image.gz out/arch/arm64/boot/dts/**/*.dtb > Image.gz-dtb
          find out/arch/arm64/boot/dts -name '*.dtb' | sort | xargs cat > dtb.img

          DTBO_FILES=$(find out/arch/arm64/boot/dts -name '*.dtbo')
          if [[ -n "$DTBO_FILES" ]]; then
            mkdir -p overlay tools
            wget -qO - https://android.googlesource.com/platform/system/libufdt/+/refs/heads/main/utils/src/mkdtboimg.py?format=TEXT | base64 -d > tools/mkdtboimg.py
            chmod +x tools/mkdtboimg.py
            cp $DTBO_FILES overlay/
            python3 tools/mkdtboimg.py create dtbo.img --page_size=4096 --id=0 overlay/*.dtbo
            rm -rf overlay tools
          else
            echo "‚ö†Ô∏è No .dtbo found"
          fi

      - name: Package with AnyKernel3
        run: |
          git clone --depth=1 https://github.com/rinnsakaguchi/AnyKernel3 -b FSociety
          cp Image.gz-dtb dtb.img dtbo.img AnyKernel3/ 2>/dev/null || true
          cd AnyKernel3 && zip -r9 ../${{ env.ZIPNAME }} ./* -x '*.git*' README.md *placeholder

      - name: Telegram - Build Success
        if: success()
        run: |
          DURATION=$(( $(date +%s) - ${{ env.BUILD_START }} ))
          MSG="‚úÖ *Kernel Build Success!*\n"
          MSG+="üì¶ *Name:* \`${{ env.ZIPNAME }}\`\n"
          MSG+="üïí *Duration:* ${DURATION}s\n"

          curl -s -X POST https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            -d text="$MSG" \
            -d parse_mode=Markdown

          curl -s -F document=@${{ env.ZIPNAME }} \
            -F caption="‚úÖ Kernel Zip" \
            -F chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendDocument

      - name: Telegram - Build Log
        if: always()
        run: |
          STATUS="Build Log"
          [[ failure() ]] && STATUS="‚ùå Failed Log"
          curl -s -F document=@log.txt \
            -F caption="üìÑ $STATUS\nüÜî \`${{ env.BUILD_ID }}\`" \
            -F chat_id=${{ env.TELEGRAM_CHAT_ID }} \
            https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendDocument

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            ${{ env.ZIPNAME }}
            log.txt
            out/.config
            defconfig_snapshot.config

      - name: Show Info
        if: success()
        run: |
          echo "‚úÖ Done: ${{ env.ZIPNAME }}"
          du -sh "${{ env.ZIPNAME }}"
          sha1sum "${{ env.ZIPNAME }}"

      - name: Disable Swap
        if: always()
        run: sudo swapoff /swapfile
